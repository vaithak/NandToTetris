// Author: Vaibhav Thakkar
// Class description: This class is used for finding the convex hull for generated points on screen

class ConvexHullSolver{
    function void jarvisMarch(RandomPoints points){
        var int currPointOnHullX, currPointOnHullY;
        var int nextEndPointX, nextEndPointY;
        var int i, cord, temp_cord, j, size;
        var Array hullPoints;
        var Array setPoints;

        let i = 1;
        let size = points.getSizeOfList();
        let setPoints = points.getList();
        let currPointOnHullX = setPoints[0];
        let currPointOnHullY = setPoints[1];

        while(i<size){
            let cord = 2*i;
            if(setPoints[cord] < currPointOnHullX){
                let currPointOnHullX = setPoints[cord];
                let currPointOnHullY = setPoints[cord+1];
            }
            let i = i+1;
        }

        // max hullpoints can be all points
        let hullPoints = Array.new(2*size);
        
        let i = 0;
        while(~(Helper.checkEqualPoints(currPointOnHullX, currPointOnHullY, hullPoints[0], hullPoints[1]))){
            let cord = 2*i;
            let hullPoints[cord]   = currPointOnHullX;
            let hullPoints[cord+1] = currPointOnHullY;

            let nextEndPointX = setPoints[0];
            let nextEndPointY = setPoints[1];

            let j = 1;
            while(j<size){
                do Screen.setColor(true);
                do Screen.drawLine(currPointOnHullX, currPointOnHullY, nextEndPointX, nextEndPointY);

                let temp_cord = 2*j;
                if(Helper.checkEqualPoints(currPointOnHullX, currPointOnHullY, nextEndPointX, nextEndPointY)){
                    do points.draw();
                    do Screen.setColor(false);
                    do Screen.drawLine(currPointOnHullX, currPointOnHullY, nextEndPointX, nextEndPointY);

                    let nextEndPointX = setPoints[temp_cord];
                    let nextEndPointY = setPoints[temp_cord+1];
                }

                if(Helper.isCrossProductPostitive(currPointOnHullX, currPointOnHullY, nextEndPointX, nextEndPointY, setPoints[temp_cord], setPoints[temp_cord+1])){
                    do points.draw();
                    do Screen.setColor(false);
                    do Screen.drawLine(currPointOnHullX, currPointOnHullY, nextEndPointX, nextEndPointY);

                    let nextEndPointX = setPoints[temp_cord];
                    let nextEndPointY = setPoints[temp_cord+1];
                }
                
                do Sys.wait(10);
                let j = j + 1;
            }

            let i = i + 1;
            do Screen.setColor(true);
            do Screen.drawLine(currPointOnHullX, currPointOnHullY, nextEndPointX, nextEndPointY);
            let currPointOnHullX = nextEndPointX;
            let currPointOnHullY = nextEndPointY;
        }

        return ;
    }
}
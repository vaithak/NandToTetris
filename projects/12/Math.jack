// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array power2;

    /** Initializes the library. */
    function void init() {
        let power2 = Array.new(16);

        let power2[0] = 1;     let power2[1] = 2;     let power2[2] = 4;      let power2[3] = 8;
        let power2[4] = 16;    let power2[5] = 32;    let power2[6] = 64;     let power2[7] = 128;
        let power2[8] = 256;   let power2[9] = 512;   let power2[10] = 1024;  let power2[11] = 2048;
        let power2[12] = 4096; let power2[13] = 8192; let power2[14] = 16384; 
        let power2[15] = 16384 + 16384;

        return;
    }

    function int powerOf2(int i){
        if(~(i<0) & (i<16)){
            return power2[i];
        }

        return -1;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if(x < 0){ return -x; }
        return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int res, shifted_x, j;

        let res = 0; let shifted_x = x; let j = 0;
        while(j < 16){
            if(~((y & power2[j]) = 0)){
                let res= res + shifted_x;
            }
            let shifted_x = shifted_x + shifted_x;
            let j = j + 1;
        }

        return res;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int neg_x, neg_y;
        var int q;
        var int result;
        
        let neg_x = x < 0;
        let neg_y = y < 0;
        let x = Math.abs(x);
        let y = Math.abs(y);

        if( y > x ) {
            return 0;
        }
        let q = Math.divide(x, y+y);
        if( x-(2*q*y) < y ) {
            let result = q+q;
        }
        else {
            let result = q+q+1;
        }
        
        if( neg_x = neg_y ) {
            return result;
        }
        else {
            return -result;
        }    
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int res, j, temp, tempQ;

        if(x < 0){
            do Sys.error(4);
        }

        if(x < 2){
            return x;
        }

        let res = 0; let j = 7;
        while(~(j < 0)){
            let temp = res + power2[j];
            let tempQ = temp * temp;
            
            if(~(tempQ > x) & (tempQ > 0)){ //avoid overflow
                let res = temp;
            }

            let j = j - 1;
        }

        return res;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b){ return a; }
        return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b){ return a; }
        return b;
    }
}

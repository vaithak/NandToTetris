// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static Array screen;
    static boolean color;   //true for black, false for white

    /** Initializes the Screen. */
    function void init() {
        let screen = 16384;
        let color = true;

        return;
    }

    /** Erases the entire screen. */
    function void clearScreen(){
        var int i;
        let i = 0;
        while(i < 8192){
            let screen[i] = false;
        }

        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, mask;
        let address = (y * 32) + (x / 16);
        let mask = Math.powerOf2(x & 15);   // x modulo 2^n = x & (2^n - 1)

        if(color){
            let screen[address] = screen[address] | mask;
        }
        else{
            let screen[address] = screen[address] & ~mask;
        }

        return;
    }

    // Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. 
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx, dy;

        let dx=x2-x1;
        let dy=y2-y1;

        if((dx=0) | (dy=0)) {
            if(dx=0){
                do Screen.drawVerticalLine(x1, Math.min(y1,y2), Math.max(y1,y2));
            }
            else{
                do Screen.drawHorizontalLine(Math.min(x1,x2), Math.max(x1,x2), y1);
            }
        }
        else{
            if(x1 < x2){
                do Screen.drawSlantLine(x1, y1, x2, y2);
            }
            else{
                do Screen.drawSlantLine(x2, y2, x1, y1);
            }
        }

        return;
    }


    // (x1, y1) is the left point and (x2, y2) is the right point
    // line is either '/' or '\'
    function void drawSlantLine(int x1, int y1, int x2, int y2){
        var int dx, dy, inc_y, change_y, change_x, lambda;
        let dx = x2 - x1;   // always >= 0
        let dy = y2 - y1;
        if(dy > 0){
            // case '\'
            let inc_y = 1;
        }
        else{
            // case '/'
            let inc_y = -1;
        }

        let change_x = 0; let change_y = 0;

        // will be our way of deciding whether to go up or right, 
        // lambda = dx*|change_y| - change_x*|dy|
        let lambda = 0;

        while(~(change_x > dx) & (((inc_y = 1) & ~(change_y > dy)) | ((inc_y = -1) & ~(change_y < dy)))){
            do Screen.drawPixel(x1 + change_x, y1 + change_y);
            if(lambda > 0){
                // go right
                let change_x = change_x + 1;
                let lambda = lambda - Math.abs(dy);
            }
            else{
                // go in y-direction
                let change_y = change_y + inc_y;
                let lambda = lambda + dx;
            }
        }

        return;
    }


    // (x, y1) is the upper endpoint and (x, y2) is the lower endpoint
    function void drawVerticalLine(int x, int y1, int y2){
        while(~(y2 < y1)){
            do Screen.drawPixel(x,y1);
            let y1 = y1 + 1;
        }

        return;
    }

    // (x1, y) is the left endpoint and (x2, y) is the right endpoint
    function void drawHorizontalLine(int x1, int x2, int y){
        // can be improvized to write 16 bits together
        while(~(x1 > x2)){
            do Screen.drawPixel(x1, y);
            let x1 = x1 + 1;
        }

        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        while(~(y1 > y2)) {
            do Screen.drawHorizontalLine(x1, x2, y1);
            let y1 = y1 + 1;
        }

        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dx, dy;

        if(r < 0){  // I am bored, won't handle any more errors :(
            do Sys.error(13);
        }
        
        let dy = -r;
        while(~(dy > r)){
            let dx = Math.sqrt((r*r)-(dy*dy));
            do Screen.drawHorizontalLine(x-dx, x+dx, y+dy);
            let dy = dy + 1;
        }

        return;
    }
}

// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field int size;     // maximum possible length
    field int length;   // current length
    field Array str;    // Array to store data

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if(maxLength < 0){
            do Sys.error(14);
        }

        if(maxLength > 0){
            let str = Array.new(maxLength);
        }
        else{
            let str = Array.new(1);
        }

        let length = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if( (j<0) | (j>(length-1)) ){
            do Sys.error(15);
        }

        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if( (j<0) | (j>(length-1)) ){
            do Sys.error(16);
        }

        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if(length = size){
            do Sys.error(17);
        }

        let str[length] = c;
        let length = length + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if(length = 0){
            do Sys.error(18);
        }

        let length = length - 1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int idx, value, sign;
        let value = 0; let idx = 0; let sign = 1;

        if(str[0] = 45){
            let sign = -1;
            let idx = 1;
        }

        while((idx < length) & (str[idx] > 49) & (str[idx] < 58)){
            let value = value*10 + (str[idx] - 48);
            let idx = idx+1;
        }

        let value = sign*value;
        return value;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let length = 0;
        if(val < 0){
            do appendChar(45);
            let val = -val;
        }

        while(~(val < 10)){
            if(length > (size-1)){  // the size of integer val is greater than string max size
                do Sys.error(19);
            }

            do appendChar(val - ((val/10)*10));
            let val = val/10;
        }
        
        do appendChar(val + 48);
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
